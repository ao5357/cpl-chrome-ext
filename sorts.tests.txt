//object passed to flipsort
0061353248: 13
0316346624: 11
0321525655: 13
0321811984: 1
0345501799: 11
0385528752: 14
0446563048: 13
0497898799: 6
0546350402: 6
0596522347: 15
1400064287: 14
1594484805: 11
1885027273: 8
2669344011: 1
2956501011: 1
4009256230: 1
8483565838: 9

//ideal sort (weight, then order)
0596522347
0385528752
1400064287
0061353248
0321525655
0446563048
0316346624
0345501799
1594484805
8483565838
1885027273
0497898799
0546350402
0321811984
2669344011
2956501011
4009256230

//sort that returns index comparison: 6
0596522347
0385528752
1400064287
0061353248
0446563048 x
0321525655 x
0316346624
0345501799
1594484805
8483565838
1885027273
0546350402 x
0497898799 x
0321811984
4009256230 x
2956501011
2669344011 x

//sort that returns opposite index comparison: 11
0596522347
1400064287 x
0385528752 x
0321525655 x
0446563048 x
0061353248 x
1594484805 x
0345501799
0316346624 x
8483565838
1885027273
0497898799
0546350402
2669344011 x
2956501011 x
4009256230 x
0321811984 x

//sort that sorts when values identical: 13
0596522347
1400064287 x
0385528752 x
0446563048 x
0321525655
0061353248 x
1594484805 x
0316346624 x
0345501799 x
8483565838
1885027273
0546350402 x
0497898799 x
4009256230 x
0321811984 x
2669344011 x
2956501011 x

//sort that doesn't sort when values identical: 10
0596522347
0385528752
1400064287
0321525655 x
0446563048 x
0061353248 x
1594484805 x
0345501799
0316346624 x
8483565838
1885027273
0546350402 x
0497898799 x
2956501011 x
2669344011
0321811984 x
4009256230 x